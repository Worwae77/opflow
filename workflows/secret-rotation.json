{
  "name": "Secret Rotation",
  "nodes": [
    {
      "parameters": {
        "rule": "0 0 * * *",
        "timezone": "UTC"
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "operation": "list",
        "path": "secret/rotation-enabled"
      },
      "name": "List Secrets",
      "type": "vault",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "mode": "splitInBatches",
        "batchSize": 1
      },
      "name": "Split Secrets",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "operation": "rotateSecret",
        "path": "={{ $json.path }}",
        "secretData": "={{ $json.newData }}"
      },
      "name": "Rotate Secret",
      "type": "vault",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=data.webhookUrl",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={ \"text\": `Secret rotation completed for ${$json.path}` }"
      },
      "name": "Send Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const rotationRules = {\n  'database': () => ({\n    username: $json.currentData.username,\n    password: Math.random().toString(36).slice(2) + Math.random().toString(36).toUpperCase().slice(2)\n  }),\n  'api': () => ({\n    key: 'key_' + Math.random().toString(36).slice(2),\n    secret: 'secret_' + Math.random().toString(36).slice(2)\n  })\n};\n\nconst type = $json.path.split('/')[2];\nconst rule = rotationRules[type];\n\nif (!rule) {\n  throw new Error(`No rotation rule found for type: ${type}`);\n}\n\nreturn {\n  json: {\n    ...$json,\n    newData: rule()\n  }\n};"
      },
      "name": "Generate New Secret",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        750,
        300
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "List Secrets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Secrets": {
      "main": [
        [
          {
            "node": "Split Secrets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Secrets": {
      "main": [
        [
          {
            "node": "Generate New Secret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate New Secret": {
      "main": [
        [
          {
            "node": "Rotate Secret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rotate Secret": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "timezone": "UTC",
    "executionTimeout": 300
  },
  "staticData": {
    "webhookUrl": "http://slack-webhook-url"
  },
  "tags": ["security", "automation"],
  "hash": "def456"
}